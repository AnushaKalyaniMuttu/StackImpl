public class Stack {
    private int maxSize;
    private int[] stackArray;
    private int top;

    // Constructor
    public Stack(int size) {
        this.maxSize = size;
        this.stackArray = new int[maxSize];
        this.top = -1; // Stack is initially empty
    }

    // Push method
    public void push(int value) {
        if (isFull()) {
            System.out.println("Stack is full. Unable to push " + value);
            return;
        }
        stackArray[++top] = value;
    }

    // Pop method
    public int pop() {
        if (isEmpty()) {
            System.out.println("Stack is empty. Unable to pop.");
            return -1; // Return -1 to indicate stack is empty
        }
        return stackArray[top--];
    }

    // Peek method
    public int peek() {
        if (isEmpty()) {
            System.out.println("Stack is empty. Unable to peek.");
            return -1; // Return -1 to indicate stack is empty
        }
        return stackArray[top];
    }

    // Check if stack is empty
    public boolean isEmpty() {
        return (top == -1);
    }

    // Check if stack is full
    public boolean isFull() {
        return (top == maxSize - 1);
    }

    // Main method for testing
    public static void main(String[] args) {
        Stack stack = new Stack(5); // Create a stack of size 5

        stack.push(10);
        stack.push(20);
        stack.push(30);

        System.out.println("Top element is: " + stack.peek());

        System.out.println("Stack contents:");
        while (!stack.isEmpty()) {
            int value = stack.pop();
            System.out.println(value);
        }

        // Try to pop from an empty stack
        stack.pop();
    }
}
